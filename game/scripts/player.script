-- --------------------------------------------------

-- [プレイヤーの入力、次のボール取得]

-- --------------------------------------------------
-- モジュール
local camera = require "orthographic.camera"
-- 共通のデータ
local data = require ("main.data")
local const = require ("tool.const")
-- ---------------------------------
-- 画像表示
-- ---------------------------------
-- 手持ちボール表示更新
local function update_ball(self, type)
	local img = "ball_" .. type
	sprite.play_flipbook("#sprite_ball", hash(img))
	msg.post("#sprite_ball", hash("enable"))
	msg.post("#sprite_line", hash("enable"))
end
-- 手持ちボール非表示
local function hide_sprite(self)
	msg.post("#sprite_ball", hash("disable"))
	msg.post("#sprite_line", hash("disable"))
end
-- ---------------------------------
-- 詳細動作
-- ---------------------------------
-- ボールを手持ちにセット
local function pick(self, type)
	data.ball = type
	-- 表示に反映
	update_ball(self, data.ball)
end
-- ボールを落とす
local function drop(self)
	-- 操作不可
	msg.post(".", "release_input_focus")
	-- ボールをタッチリリース位置に生成
	local pos = self.pos
	pos.x = pos.x + const.RANDOM(-1,1)
	msg.post("/ball_f",hash("generate"),{type = data.ball, pos = pos})
	-- 手持ちのボールを消す
	msg.post(".",hash("hide"))
	-- ゲーム状態を変更
	msg.post("/common#game",hash("drop"))
	msg.post("main:/sound#sound_gate", hash("sound"), {name = "sllime_s"})
end
-- 初期化
local function reset(self)
	-- ドロップ位置初期化
	self.pos = data.HAND_POS
	-- ボールを選択して手持ちにセットする
	data.next_ball = const.RANDOM(1,data.PULL_TYPE_NUM)
	pick(self, data.next_ball)
	-- 次のボールをセット
	data.next_ball = const.RANDOM(1,data.PULL_TYPE_NUM)
	-- guiに反映
	msg.post("/gui#windows",hash("update_next"),{type = data.next_ball})
end
-- ---------------------------------
-- 基本
-- ---------------------------------
function on_message(self, message_id, message, sender)
	if message_id == hash("pull") then
		-- 次のボールを手持ちにセットする
		pick(self, data.next_ball)
		-- 次のボールをセット
		data.next_ball = const.RANDOM(1,data.PULL_TYPE_NUM)
		-- guiに反映
		msg.post("/gui#windows",hash("update_next"),{type = data.next_ball})
		-- 操作可能
		msg.post(".", "acquire_input_focus")
	elseif message_id == hash("reset") then
		reset(self)
		-- 操作可能
		msg.post(".", "acquire_input_focus")
	elseif message_id == hash("hide") then
		-- 手持ちのボールを消す
		hide_sprite(self)
	elseif message_id == hash("show") then
		-- 表示に反映
		update_ball(self, data.ball)
	end
end

function on_input(self, action_id, action)
	-- カメラ位置をワールド位置に変換する
	local screen = vmath.vector3(action.x, action.y, 0)
	-- X方向の位置を範囲内にする
	-- screen.x = lume.clamp(screen.x, data.DROP_RANGE.min, data.DROP_RANGE.max)
	local w_pos = camera.screen_to_world(nil, screen)
	self.pos.x = w_pos.x
	go.set_position(self.pos)
	-- プレイ中タッチリリースしたときボールを落とす
	if data.game_state.game == "PLAYING" and action.released and action_id == const.TOUCH then
		if screen.y < 720 then
			drop(self)
		end
	end
end