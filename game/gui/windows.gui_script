-- --------------------------------------------------

-- [スコアとネクストボックスのGUI]

-- --------------------------------------------------
-- モジュール
local common = require "tool.common"
-- 共通のデータ
local data = require ("main.data")
-- --------------------------------------------------
-- button setup
-- --------------------------------------------------
local s_button = require "tool.button.button"
local menu_button = nil
local function init_button(self)
	self.menu_node = gui.get_node("menu_button")
	menu_button = 	s_button.create(self.menu_node,function()
		-- ダイアログ状態へ
		msg.post("game:/common#game",hash("state_transition"),{ state = "DIALOGUE"})
		msg.post(".", "release_input_focus")
		-- メニューダイアログ表示
		msg.post("main:/main_gui#menu",hash("show"))
	end, nil, nil, nil)
end
-- --------------------------------------------------
-- 詳細動作
-- --------------------------------------------------
-- スコア表示更新
local function update_score(self)
	local text = common.comma_value(data.score)
	gui.set_text(self.score_p, text)
end
-- nextボール表示更新
local function update_next(self, type)
	local img = "ball_" .. type
	gui.play_flipbook(self.next_p, img)
end
-- --------------------------------------------------
-- init
-- --------------------------------------------------
-- ノード初期設定
local function pre_get_nodes(self)
	self.score_box = gui.get_node("score_box")
	self.next_box = gui.get_node("next_box")
	self.score_p = gui.get_node("score_p")
	self.next_p = gui.get_node("next_p")
end
-- -----------------------------------------------
-- 基本
-- -----------------------------------------------
function init(self)
	gui.set_render_order(11)
	pre_get_nodes(self)
	init_button(self)
	gui.set_enabled(self.score_box, false)
	gui.set_enabled(self.next_box, false)
	gui.set_enabled(self.menu_node, false)

end

function update(self, dt)
	update_score(self)
end

function on_input(self, action_id, action)
	if	data.game_state.game == "PLAYING" then
		menu_button.on_input(action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		gui.set_enabled(self.score_box, true)
		gui.set_enabled(self.next_box, true)
		gui.set_enabled(self.menu_node, true)
		msg.post(".", "acquire_input_focus")
	elseif message_id == hash("hide") then
		gui.set_enabled(self.score_box, false)
		gui.set_enabled(self.next_box, false)
		gui.set_enabled(self.menu_node, false)
		msg.post(".", "release_input_focus")
	elseif message_id == hash("update_next") then
		update_next(self, message.type)
	end
end